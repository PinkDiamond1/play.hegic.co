"use strict";(self.webpackChunkhedge=self.webpackChunkhedge||[]).push([[274],{93274:module=>{eval('module.exports = JSON.parse(\'{"address":"0xd3F41e2239c848Ed576eB4dc04074Ad6049A00f1","abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"__decimals","type":"uint8"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mintTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0xde36f394dc7374ea5ad10cdcfd14c88929c7b3a9c201fe55fb171c94769f8bd8","receipt":{"to":null,"from":"0x4fC6C9491530f9e41D5d8Fe123eD99068919093C","contractAddress":"0xd3F41e2239c848Ed576eB4dc04074Ad6049A00f1","transactionIndex":38,"gasUsed":"678968","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x5c7c4c56e572e4d1d00a68007e2b815e50450ddb54b8c26629a145523d800df1","transactionHash":"0xde36f394dc7374ea5ad10cdcfd14c88929c7b3a9c201fe55fb171c94769f8bd8","logs":[],"blockNumber":12287256,"cumulativeGasUsed":"2515482","status":1,"byzantium":true},"args":["HEGIC Playground USD","pgUSD",6],"solcInputHash":"0a548ebdda8d7001933b70b1421b32db","metadata":"{\\\\"compiler\\\\":{\\\\"version\\\\":\\\\"0.8.6+commit.11564f7e\\\\"},\\\\"language\\\\":\\\\"Solidity\\\\",\\\\"output\\\\":{\\\\"abi\\\\":[{\\\\"inputs\\\\":[{\\\\"internalType\\\\":\\\\"string\\\\",\\\\"name\\\\":\\\\"name\\\\",\\\\"type\\\\":\\\\"string\\\\"},{\\\\"internalType\\\\":\\\\"string\\\\",\\\\"name\\\\":\\\\"symbol\\\\",\\\\"type\\\\":\\\\"string\\\\"},{\\\\"internalType\\\\":\\\\"uint8\\\\",\\\\"name\\\\":\\\\"__decimals\\\\",\\\\"type\\\\":\\\\"uint8\\\\"}],\\\\"stateMutability\\\\":\\\\"nonpayable\\\\",\\\\"type\\\\":\\\\"constructor\\\\"},{\\\\"anonymous\\\\":false,\\\\"inputs\\\\":[{\\\\"indexed\\\\":true,\\\\"internalType\\\\":\\\\"address\\\\",\\\\"name\\\\":\\\\"owner\\\\",\\\\"type\\\\":\\\\"address\\\\"},{\\\\"indexed\\\\":true,\\\\"internalType\\\\":\\\\"address\\\\",\\\\"name\\\\":\\\\"spender\\\\",\\\\"type\\\\":\\\\"address\\\\"},{\\\\"indexed\\\\":false,\\\\"internalType\\\\":\\\\"uint256\\\\",\\\\"name\\\\":\\\\"value\\\\",\\\\"type\\\\":\\\\"uint256\\\\"}],\\\\"name\\\\":\\\\"Approval\\\\",\\\\"type\\\\":\\\\"event\\\\"},{\\\\"anonymous\\\\":false,\\\\"inputs\\\\":[{\\\\"indexed\\\\":true,\\\\"internalType\\\\":\\\\"address\\\\",\\\\"name\\\\":\\\\"from\\\\",\\\\"type\\\\":\\\\"address\\\\"},{\\\\"indexed\\\\":true,\\\\"internalType\\\\":\\\\"address\\\\",\\\\"name\\\\":\\\\"to\\\\",\\\\"type\\\\":\\\\"address\\\\"},{\\\\"indexed\\\\":false,\\\\"internalType\\\\":\\\\"uint256\\\\",\\\\"name\\\\":\\\\"value\\\\",\\\\"type\\\\":\\\\"uint256\\\\"}],\\\\"name\\\\":\\\\"Transfer\\\\",\\\\"type\\\\":\\\\"event\\\\"},{\\\\"inputs\\\\":[{\\\\"internalType\\\\":\\\\"address\\\\",\\\\"name\\\\":\\\\"owner\\\\",\\\\"type\\\\":\\\\"address\\\\"},{\\\\"internalType\\\\":\\\\"address\\\\",\\\\"name\\\\":\\\\"spender\\\\",\\\\"type\\\\":\\\\"address\\\\"}],\\\\"name\\\\":\\\\"allowance\\\\",\\\\"outputs\\\\":[{\\\\"internalType\\\\":\\\\"uint256\\\\",\\\\"name\\\\":\\\\"\\\\",\\\\"type\\\\":\\\\"uint256\\\\"}],\\\\"stateMutability\\\\":\\\\"view\\\\",\\\\"type\\\\":\\\\"function\\\\"},{\\\\"inputs\\\\":[{\\\\"internalType\\\\":\\\\"address\\\\",\\\\"name\\\\":\\\\"spender\\\\",\\\\"type\\\\":\\\\"address\\\\"},{\\\\"internalType\\\\":\\\\"uint256\\\\",\\\\"name\\\\":\\\\"amount\\\\",\\\\"type\\\\":\\\\"uint256\\\\"}],\\\\"name\\\\":\\\\"approve\\\\",\\\\"outputs\\\\":[{\\\\"internalType\\\\":\\\\"bool\\\\",\\\\"name\\\\":\\\\"\\\\",\\\\"type\\\\":\\\\"bool\\\\"}],\\\\"stateMutability\\\\":\\\\"nonpayable\\\\",\\\\"type\\\\":\\\\"function\\\\"},{\\\\"inputs\\\\":[{\\\\"internalType\\\\":\\\\"address\\\\",\\\\"name\\\\":\\\\"account\\\\",\\\\"type\\\\":\\\\"address\\\\"}],\\\\"name\\\\":\\\\"balanceOf\\\\",\\\\"outputs\\\\":[{\\\\"internalType\\\\":\\\\"uint256\\\\",\\\\"name\\\\":\\\\"\\\\",\\\\"type\\\\":\\\\"uint256\\\\"}],\\\\"stateMutability\\\\":\\\\"view\\\\",\\\\"type\\\\":\\\\"function\\\\"},{\\\\"inputs\\\\":[],\\\\"name\\\\":\\\\"decimals\\\\",\\\\"outputs\\\\":[{\\\\"internalType\\\\":\\\\"uint8\\\\",\\\\"name\\\\":\\\\"\\\\",\\\\"type\\\\":\\\\"uint8\\\\"}],\\\\"stateMutability\\\\":\\\\"view\\\\",\\\\"type\\\\":\\\\"function\\\\"},{\\\\"inputs\\\\":[{\\\\"internalType\\\\":\\\\"address\\\\",\\\\"name\\\\":\\\\"spender\\\\",\\\\"type\\\\":\\\\"address\\\\"},{\\\\"internalType\\\\":\\\\"uint256\\\\",\\\\"name\\\\":\\\\"subtractedValue\\\\",\\\\"type\\\\":\\\\"uint256\\\\"}],\\\\"name\\\\":\\\\"decreaseAllowance\\\\",\\\\"outputs\\\\":[{\\\\"internalType\\\\":\\\\"bool\\\\",\\\\"name\\\\":\\\\"\\\\",\\\\"type\\\\":\\\\"bool\\\\"}],\\\\"stateMutability\\\\":\\\\"nonpayable\\\\",\\\\"type\\\\":\\\\"function\\\\"},{\\\\"inputs\\\\":[{\\\\"internalType\\\\":\\\\"address\\\\",\\\\"name\\\\":\\\\"spender\\\\",\\\\"type\\\\":\\\\"address\\\\"},{\\\\"internalType\\\\":\\\\"uint256\\\\",\\\\"name\\\\":\\\\"addedValue\\\\",\\\\"type\\\\":\\\\"uint256\\\\"}],\\\\"name\\\\":\\\\"increaseAllowance\\\\",\\\\"outputs\\\\":[{\\\\"internalType\\\\":\\\\"bool\\\\",\\\\"name\\\\":\\\\"\\\\",\\\\"type\\\\":\\\\"bool\\\\"}],\\\\"stateMutability\\\\":\\\\"nonpayable\\\\",\\\\"type\\\\":\\\\"function\\\\"},{\\\\"inputs\\\\":[{\\\\"internalType\\\\":\\\\"uint256\\\\",\\\\"name\\\\":\\\\"amount\\\\",\\\\"type\\\\":\\\\"uint256\\\\"}],\\\\"name\\\\":\\\\"mint\\\\",\\\\"outputs\\\\":[],\\\\"stateMutability\\\\":\\\\"nonpayable\\\\",\\\\"type\\\\":\\\\"function\\\\"},{\\\\"inputs\\\\":[{\\\\"internalType\\\\":\\\\"address\\\\",\\\\"name\\\\":\\\\"account\\\\",\\\\"type\\\\":\\\\"address\\\\"},{\\\\"internalType\\\\":\\\\"uint256\\\\",\\\\"name\\\\":\\\\"amount\\\\",\\\\"type\\\\":\\\\"uint256\\\\"}],\\\\"name\\\\":\\\\"mintTo\\\\",\\\\"outputs\\\\":[],\\\\"stateMutability\\\\":\\\\"nonpayable\\\\",\\\\"type\\\\":\\\\"function\\\\"},{\\\\"inputs\\\\":[],\\\\"name\\\\":\\\\"name\\\\",\\\\"outputs\\\\":[{\\\\"internalType\\\\":\\\\"string\\\\",\\\\"name\\\\":\\\\"\\\\",\\\\"type\\\\":\\\\"string\\\\"}],\\\\"stateMutability\\\\":\\\\"view\\\\",\\\\"type\\\\":\\\\"function\\\\"},{\\\\"inputs\\\\":[],\\\\"name\\\\":\\\\"symbol\\\\",\\\\"outputs\\\\":[{\\\\"internalType\\\\":\\\\"string\\\\",\\\\"name\\\\":\\\\"\\\\",\\\\"type\\\\":\\\\"string\\\\"}],\\\\"stateMutability\\\\":\\\\"view\\\\",\\\\"type\\\\":\\\\"function\\\\"},{\\\\"inputs\\\\":[],\\\\"name\\\\":\\\\"totalSupply\\\\",\\\\"outputs\\\\":[{\\\\"internalType\\\\":\\\\"uint256\\\\",\\\\"name\\\\":\\\\"\\\\",\\\\"type\\\\":\\\\"uint256\\\\"}],\\\\"stateMutability\\\\":\\\\"view\\\\",\\\\"type\\\\":\\\\"function\\\\"},{\\\\"inputs\\\\":[{\\\\"internalType\\\\":\\\\"address\\\\",\\\\"name\\\\":\\\\"recipient\\\\",\\\\"type\\\\":\\\\"address\\\\"},{\\\\"internalType\\\\":\\\\"uint256\\\\",\\\\"name\\\\":\\\\"amount\\\\",\\\\"type\\\\":\\\\"uint256\\\\"}],\\\\"name\\\\":\\\\"transfer\\\\",\\\\"outputs\\\\":[{\\\\"internalType\\\\":\\\\"bool\\\\",\\\\"name\\\\":\\\\"\\\\",\\\\"type\\\\":\\\\"bool\\\\"}],\\\\"stateMutability\\\\":\\\\"nonpayable\\\\",\\\\"type\\\\":\\\\"function\\\\"},{\\\\"inputs\\\\":[{\\\\"internalType\\\\":\\\\"address\\\\",\\\\"name\\\\":\\\\"sender\\\\",\\\\"type\\\\":\\\\"address\\\\"},{\\\\"internalType\\\\":\\\\"address\\\\",\\\\"name\\\\":\\\\"recipient\\\\",\\\\"type\\\\":\\\\"address\\\\"},{\\\\"internalType\\\\":\\\\"uint256\\\\",\\\\"name\\\\":\\\\"amount\\\\",\\\\"type\\\\":\\\\"uint256\\\\"}],\\\\"name\\\\":\\\\"transferFrom\\\\",\\\\"outputs\\\\":[{\\\\"internalType\\\\":\\\\"bool\\\\",\\\\"name\\\\":\\\\"\\\\",\\\\"type\\\\":\\\\"bool\\\\"}],\\\\"stateMutability\\\\":\\\\"nonpayable\\\\",\\\\"type\\\\":\\\\"function\\\\"}],\\\\"devdoc\\\\":{\\\\"kind\\\\":\\\\"dev\\\\",\\\\"methods\\\\":{\\\\"allowance(address,address)\\\\":{\\\\"details\\\\":\\\\"See {IERC20-allowance}.\\\\"},\\\\"approve(address,uint256)\\\\":{\\\\"details\\\\":\\\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\\\"},\\\\"balanceOf(address)\\\\":{\\\\"details\\\\":\\\\"See {IERC20-balanceOf}.\\\\"},\\\\"decimals()\\\\":{\\\\"details\\\\":\\\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\\\"},\\\\"decreaseAllowance(address,uint256)\\\\":{\\\\"details\\\\":\\\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\\\"},\\\\"increaseAllowance(address,uint256)\\\\":{\\\\"details\\\\":\\\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\\\"},\\\\"name()\\\\":{\\\\"details\\\\":\\\\"Returns the name of the token.\\\\"},\\\\"symbol()\\\\":{\\\\"details\\\\":\\\\"Returns the symbol of the token, usually a shorter version of the name.\\\\"},\\\\"totalSupply()\\\\":{\\\\"details\\\\":\\\\"See {IERC20-totalSupply}.\\\\"},\\\\"transfer(address,uint256)\\\\":{\\\\"details\\\\":\\\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\\\"},\\\\"transferFrom(address,address,uint256)\\\\":{\\\\"details\\\\":\\\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\\\'s tokens of at least `amount`.\\\\"}},\\\\"version\\\\":1},\\\\"userdoc\\\\":{\\\\"kind\\\\":\\\\"user\\\\",\\\\"methods\\\\":{},\\\\"version\\\\":1}},\\\\"settings\\\\":{\\\\"compilationTarget\\\\":{\\\\"contracts/Mocks/ERC20Mock.sol\\\\":\\\\"ERC20Mock\\\\"},\\\\"evmVersion\\\\":\\\\"berlin\\\\",\\\\"libraries\\\\":{},\\\\"metadata\\\\":{\\\\"bytecodeHash\\\\":\\\\"ipfs\\\\",\\\\"useLiteralContent\\\\":true},\\\\"optimizer\\\\":{\\\\"enabled\\\\":true,\\\\"runs\\\\":200},\\\\"remappings\\\\":[]},\\\\"sources\\\\":{\\\\"@openzeppelin/contracts/access/AccessControl.sol\\\\":{\\\\"content\\\\":\\\\"// SPDX-License-Identifier: MIT\\\\\\\\n\\\\\\\\npragma solidity ^0.8.0;\\\\\\\\n\\\\\\\\nimport \\\\\\\\\\\\"../utils/Context.sol\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\"../utils/Strings.sol\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\"../utils/introspection/ERC165.sol\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\\\\\\\n */\\\\\\\\ninterface IAccessControl {\\\\\\\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\\\\\\\n\\\\\\\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\\\\\\\n\\\\\\\\n    function grantRole(bytes32 role, address account) external;\\\\\\\\n\\\\\\\\n    function revokeRole(bytes32 role, address account) external;\\\\\\\\n\\\\\\\\n    function renounceRole(bytes32 role, address account) external;\\\\\\\\n}\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev Contract module that allows children to implement role-based access\\\\\\\\n * control mechanisms. This is a lightweight version that doesn\\\'t allow enumerating role\\\\\\\\n * members except through off-chain means by accessing the contract event logs. Some\\\\\\\\n * applications may benefit from on-chain enumerability, for those cases see\\\\\\\\n * {AccessControlEnumerable}.\\\\\\\\n *\\\\\\\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\\\\\\\n * in the external API and be unique. The best way to achieve this is by\\\\\\\\n * using `public constant` hash digests:\\\\\\\\n *\\\\\\\\n * ```\\\\\\\\n * bytes32 public constant MY_ROLE = keccak256(\\\\\\\\\\\\"MY_ROLE\\\\\\\\\\\\");\\\\\\\\n * ```\\\\\\\\n *\\\\\\\\n * Roles can be used to represent a set of permissions. To restrict access to a\\\\\\\\n * function call, use {hasRole}:\\\\\\\\n *\\\\\\\\n * ```\\\\\\\\n * function foo() public {\\\\\\\\n *     require(hasRole(MY_ROLE, msg.sender));\\\\\\\\n *     ...\\\\\\\\n * }\\\\\\\\n * ```\\\\\\\\n *\\\\\\\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\\\\\\\n * {revokeRole} functions. Each role has an associated admin role, and only\\\\\\\\n * accounts that have a role\\\'s admin role can call {grantRole} and {revokeRole}.\\\\\\\\n *\\\\\\\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\\\\\\\n * that only accounts with this role will be able to grant or revoke other\\\\\\\\n * roles. More complex role relationships can be created by using\\\\\\\\n * {_setRoleAdmin}.\\\\\\\\n *\\\\\\\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\\\\\\\n * grant and revoke this role. Extra precautions should be taken to secure\\\\\\\\n * accounts that have been granted it.\\\\\\\\n */\\\\\\\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\\\\\\\n    struct RoleData {\\\\\\\\n        mapping(address => bool) members;\\\\\\\\n        bytes32 adminRole;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    mapping(bytes32 => RoleData) private _roles;\\\\\\\\n\\\\\\\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Emitted when `newAdminRole` is set as ``role``\\\'s admin role, replacing `previousAdminRole`\\\\\\\\n     *\\\\\\\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\\\\\\\n     * {RoleAdminChanged} not being emitted signaling this.\\\\\\\\n     *\\\\\\\\n     * _Available since v3.1._\\\\\\\\n     */\\\\\\\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Emitted when `account` is granted `role`.\\\\\\\\n     *\\\\\\\\n     * `sender` is the account that originated the contract call, an admin role\\\\\\\\n     * bearer except when using {_setupRole}.\\\\\\\\n     */\\\\\\\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Emitted when `account` is revoked `role`.\\\\\\\\n     *\\\\\\\\n     * `sender` is the account that originated the contract call:\\\\\\\\n     *   - if using `revokeRole`, it is the admin role bearer\\\\\\\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\\\\\\\n     */\\\\\\\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\\\\\\\n     * with a standardized message including the required role.\\\\\\\\n     *\\\\\\\\n     * The format of the revert reason is given by the following regular expression:\\\\\\\\n     *\\\\\\\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\\\\\\\n     *\\\\\\\\n     * _Available since v4.1._\\\\\\\\n     */\\\\\\\\n    modifier onlyRole(bytes32 role) {\\\\\\\\n        _checkRole(role, _msgSender());\\\\\\\\n        _;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev See {IERC165-supportsInterface}.\\\\\\\\n     */\\\\\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\\\\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns `true` if `account` has been granted `role`.\\\\\\\\n     */\\\\\\\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\\\\\\\n        return _roles[role].members[account];\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Revert with a standard message if `account` is missing `role`.\\\\\\\\n     *\\\\\\\\n     * The format of the revert reason is given by the following regular expression:\\\\\\\\n     *\\\\\\\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\\\\\\\n     */\\\\\\\\n    function _checkRole(bytes32 role, address account) internal view {\\\\\\\\n        if (!hasRole(role, account)) {\\\\\\\\n            revert(\\\\\\\\n                string(\\\\\\\\n                    abi.encodePacked(\\\\\\\\n                        \\\\\\\\\\\\"AccessControl: account \\\\\\\\\\\\",\\\\\\\\n                        Strings.toHexString(uint160(account), 20),\\\\\\\\n                        \\\\\\\\\\\\" is missing role \\\\\\\\\\\\",\\\\\\\\n                        Strings.toHexString(uint256(role), 32)\\\\\\\\n                    )\\\\\\\\n                )\\\\\\\\n            );\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\\\\\\\n     * {revokeRole}.\\\\\\\\n     *\\\\\\\\n     * To change a role\\\'s admin, use {_setRoleAdmin}.\\\\\\\\n     */\\\\\\\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\\\\\\\n        return _roles[role].adminRole;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Grants `role` to `account`.\\\\\\\\n     *\\\\\\\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\\\\\\\n     * event.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - the caller must have ``role``\\\'s admin role.\\\\\\\\n     */\\\\\\\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\\\\\\\n        _grantRole(role, account);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Revokes `role` from `account`.\\\\\\\\n     *\\\\\\\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - the caller must have ``role``\\\'s admin role.\\\\\\\\n     */\\\\\\\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\\\\\\\n        _revokeRole(role, account);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Revokes `role` from the calling account.\\\\\\\\n     *\\\\\\\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\\'s\\\\\\\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\\\\\\\n     * if they are compromised (such as when a trusted device is misplaced).\\\\\\\\n     *\\\\\\\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\\\\\\\n     * event.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - the caller must be `account`.\\\\\\\\n     */\\\\\\\\n    function renounceRole(bytes32 role, address account) public virtual override {\\\\\\\\n        require(account == _msgSender(), \\\\\\\\\\\\"AccessControl: can only renounce roles for self\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n        _revokeRole(role, account);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Grants `role` to `account`.\\\\\\\\n     *\\\\\\\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\\\\\\\n     * event. Note that unlike {grantRole}, this function doesn\\\'t perform any\\\\\\\\n     * checks on the calling account.\\\\\\\\n     *\\\\\\\\n     * [WARNING]\\\\\\\\n     * ====\\\\\\\\n     * This function should only be called from the constructor when setting\\\\\\\\n     * up the initial roles for the system.\\\\\\\\n     *\\\\\\\\n     * Using this function in any other way is effectively circumventing the admin\\\\\\\\n     * system imposed by {AccessControl}.\\\\\\\\n     * ====\\\\\\\\n     */\\\\\\\\n    function _setupRole(bytes32 role, address account) internal virtual {\\\\\\\\n        _grantRole(role, account);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Sets `adminRole` as ``role``\\\'s admin role.\\\\\\\\n     *\\\\\\\\n     * Emits a {RoleAdminChanged} event.\\\\\\\\n     */\\\\\\\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\\\\\\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\\\\\\\n        _roles[role].adminRole = adminRole;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    function _grantRole(bytes32 role, address account) private {\\\\\\\\n        if (!hasRole(role, account)) {\\\\\\\\n            _roles[role].members[account] = true;\\\\\\\\n            emit RoleGranted(role, account, _msgSender());\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    function _revokeRole(bytes32 role, address account) private {\\\\\\\\n        if (hasRole(role, account)) {\\\\\\\\n            _roles[role].members[account] = false;\\\\\\\\n            emit RoleRevoked(role, account, _msgSender());\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\\\\",\\\\"license\\\\":\\\\"MIT\\\\"},\\\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\\":{\\\\"content\\\\":\\\\"// SPDX-License-Identifier: MIT\\\\\\\\n\\\\\\\\npragma solidity ^0.8.0;\\\\\\\\n\\\\\\\\nimport \\\\\\\\\\\\"./AccessControl.sol\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\"../utils/structs/EnumerableSet.sol\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\\\\\\\n */\\\\\\\\ninterface IAccessControlEnumerable {\\\\\\\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\\\\\\\n\\\\\\\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\\\\\\\n}\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\\\\\\\n */\\\\\\\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\\\\\\\n    using EnumerableSet for EnumerableSet.AddressSet;\\\\\\\\n\\\\\\\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev See {IERC165-supportsInterface}.\\\\\\\\n     */\\\\\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\\\\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\\\\\\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\\\\\\\n     *\\\\\\\\n     * Role bearers are not sorted in any particular way, and their ordering may\\\\\\\\n     * change at any point.\\\\\\\\n     *\\\\\\\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\\\\\\\n     * you perform all queries on the same block. See the following\\\\\\\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\\\\\\\n     * for more information.\\\\\\\\n     */\\\\\\\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\\\\\\\n        return _roleMembers[role].at(index);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the number of accounts that have `role`. Can be used\\\\\\\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\\\\\\\n     */\\\\\\\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\\\\\\\n        return _roleMembers[role].length();\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Overload {grantRole} to track enumerable memberships\\\\\\\\n     */\\\\\\\\n    function grantRole(bytes32 role, address account) public virtual override {\\\\\\\\n        super.grantRole(role, account);\\\\\\\\n        _roleMembers[role].add(account);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Overload {revokeRole} to track enumerable memberships\\\\\\\\n     */\\\\\\\\n    function revokeRole(bytes32 role, address account) public virtual override {\\\\\\\\n        super.revokeRole(role, account);\\\\\\\\n        _roleMembers[role].remove(account);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Overload {renounceRole} to track enumerable memberships\\\\\\\\n     */\\\\\\\\n    function renounceRole(bytes32 role, address account) public virtual override {\\\\\\\\n        super.renounceRole(role, account);\\\\\\\\n        _roleMembers[role].remove(account);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Overload {_setupRole} to track enumerable memberships\\\\\\\\n     */\\\\\\\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\\\\\\\n        super._setupRole(role, account);\\\\\\\\n        _roleMembers[role].add(account);\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0x33ba8a175bb81046a02b02e8d5eb4cabc87e1875f4a74bbc6f11c51db5e40d8c\\\\",\\\\"license\\\\":\\\\"MIT\\\\"},\\\\"@openzeppelin/contracts/security/Pausable.sol\\\\":{\\\\"content\\\\":\\\\"// SPDX-License-Identifier: MIT\\\\\\\\n\\\\\\\\npragma solidity ^0.8.0;\\\\\\\\n\\\\\\\\nimport \\\\\\\\\\\\"../utils/Context.sol\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev Contract module which allows children to implement an emergency stop\\\\\\\\n * mechanism that can be triggered by an authorized account.\\\\\\\\n *\\\\\\\\n * This module is used through inheritance. It will make available the\\\\\\\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\\\\\\\n * the functions of your contract. Note that they will not be pausable by\\\\\\\\n * simply including this module, only once the modifiers are put in place.\\\\\\\\n */\\\\\\\\nabstract contract Pausable is Context {\\\\\\\\n    /**\\\\\\\\n     * @dev Emitted when the pause is triggered by `account`.\\\\\\\\n     */\\\\\\\\n    event Paused(address account);\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Emitted when the pause is lifted by `account`.\\\\\\\\n     */\\\\\\\\n    event Unpaused(address account);\\\\\\\\n\\\\\\\\n    bool private _paused;\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Initializes the contract in unpaused state.\\\\\\\\n     */\\\\\\\\n    constructor() {\\\\\\\\n        _paused = false;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns true if the contract is paused, and false otherwise.\\\\\\\\n     */\\\\\\\\n    function paused() public view virtual returns (bool) {\\\\\\\\n        return _paused;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - The contract must not be paused.\\\\\\\\n     */\\\\\\\\n    modifier whenNotPaused() {\\\\\\\\n        require(!paused(), \\\\\\\\\\\\"Pausable: paused\\\\\\\\\\\\");\\\\\\\\n        _;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Modifier to make a function callable only when the contract is paused.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - The contract must be paused.\\\\\\\\n     */\\\\\\\\n    modifier whenPaused() {\\\\\\\\n        require(paused(), \\\\\\\\\\\\"Pausable: not paused\\\\\\\\\\\\");\\\\\\\\n        _;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Triggers stopped state.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - The contract must not be paused.\\\\\\\\n     */\\\\\\\\n    function _pause() internal virtual whenNotPaused {\\\\\\\\n        _paused = true;\\\\\\\\n        emit Paused(_msgSender());\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns to normal state.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - The contract must be paused.\\\\\\\\n     */\\\\\\\\n    function _unpause() internal virtual whenPaused {\\\\\\\\n        _paused = false;\\\\\\\\n        emit Unpaused(_msgSender());\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\\\\",\\\\"license\\\\":\\\\"MIT\\\\"},\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\":{\\\\"content\\\\":\\\\"// SPDX-License-Identifier: MIT\\\\\\\\n\\\\\\\\npragma solidity ^0.8.0;\\\\\\\\n\\\\\\\\nimport \\\\\\\\\\\\"./IERC20.sol\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\"./extensions/IERC20Metadata.sol\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\"../../utils/Context.sol\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev Implementation of the {IERC20} interface.\\\\\\\\n *\\\\\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\\\\\n *\\\\\\\\n * TIP: For a detailed writeup see our guide\\\\\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\\\\\n * to implement supply mechanisms].\\\\\\\\n *\\\\\\\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\\\\\\\n * of returning `false` on failure. This behavior is nonetheless conventional\\\\\\\\n * and does not conflict with the expectations of ERC20 applications.\\\\\\\\n *\\\\\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\\\\\n * these events, as it isn\\\'t required by the specification.\\\\\\\\n *\\\\\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\\\\\n * functions have been added to mitigate the well-known issues around setting\\\\\\\\n * allowances. See {IERC20-approve}.\\\\\\\\n */\\\\\\\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\\\\\\\n    mapping(address => uint256) private _balances;\\\\\\\\n\\\\\\\\n    mapping(address => mapping(address => uint256)) private _allowances;\\\\\\\\n\\\\\\\\n    uint256 private _totalSupply;\\\\\\\\n\\\\\\\\n    string private _name;\\\\\\\\n    string private _symbol;\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Sets the values for {name} and {symbol}.\\\\\\\\n     *\\\\\\\\n     * The default value of {decimals} is 18. To select a different value for\\\\\\\\n     * {decimals} you should overload it.\\\\\\\\n     *\\\\\\\\n     * All two of these values are immutable: they can only be set once during\\\\\\\\n     * construction.\\\\\\\\n     */\\\\\\\\n    constructor(string memory name_, string memory symbol_) {\\\\\\\\n        _name = name_;\\\\\\\\n        _symbol = symbol_;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the name of the token.\\\\\\\\n     */\\\\\\\\n    function name() public view virtual override returns (string memory) {\\\\\\\\n        return _name;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\\\\\n     * name.\\\\\\\\n     */\\\\\\\\n    function symbol() public view virtual override returns (string memory) {\\\\\\\\n        return _symbol;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\\\\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\\\\\\\n     *\\\\\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\\\\\\\n     * overridden;\\\\\\\\n     *\\\\\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\\\\\n     * no way affects any of the arithmetic of the contract, including\\\\\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\\\\\n     */\\\\\\\\n    function decimals() public view virtual override returns (uint8) {\\\\\\\\n        return 18;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev See {IERC20-totalSupply}.\\\\\\\\n     */\\\\\\\\n    function totalSupply() public view virtual override returns (uint256) {\\\\\\\\n        return _totalSupply;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev See {IERC20-balanceOf}.\\\\\\\\n     */\\\\\\\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\\\\\\\n        return _balances[account];\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev See {IERC20-transfer}.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - `recipient` cannot be the zero address.\\\\\\\\n     * - the caller must have a balance of at least `amount`.\\\\\\\\n     */\\\\\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\\\\\n        _transfer(_msgSender(), recipient, amount);\\\\\\\\n        return true;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev See {IERC20-allowance}.\\\\\\\\n     */\\\\\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\\\\\n        return _allowances[owner][spender];\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev See {IERC20-approve}.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - `spender` cannot be the zero address.\\\\\\\\n     */\\\\\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\\\\\n        _approve(_msgSender(), spender, amount);\\\\\\\\n        return true;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev See {IERC20-transferFrom}.\\\\\\\\n     *\\\\\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\\\\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\\\\\n     * - `sender` must have a balance of at least `amount`.\\\\\\\\n     * - the caller must have allowance for ``sender``\\\'s tokens of at least\\\\\\\\n     * `amount`.\\\\\\\\n     */\\\\\\\\n    function transferFrom(\\\\\\\\n        address sender,\\\\\\\\n        address recipient,\\\\\\\\n        uint256 amount\\\\\\\\n    ) public virtual override returns (bool) {\\\\\\\\n        _transfer(sender, recipient, amount);\\\\\\\\n\\\\\\\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\\\\\\\n        require(currentAllowance >= amount, \\\\\\\\\\\\"ERC20: transfer amount exceeds allowance\\\\\\\\\\\\");\\\\\\\\n        unchecked {\\\\\\\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\\\\\\\n        }\\\\\\\\n\\\\\\\\n        return true;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\\\\\n     *\\\\\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\\\\\n     * problems described in {IERC20-approve}.\\\\\\\\n     *\\\\\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - `spender` cannot be the zero address.\\\\\\\\n     */\\\\\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\\\\\\\n        return true;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\\\\\n     *\\\\\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\\\\\n     * problems described in {IERC20-approve}.\\\\\\\\n     *\\\\\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - `spender` cannot be the zero address.\\\\\\\\n     * - `spender` must have allowance for the caller of at least\\\\\\\\n     * `subtractedValue`.\\\\\\\\n     */\\\\\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\\\\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\\\\\\\n        require(currentAllowance >= subtractedValue, \\\\\\\\\\\\"ERC20: decreased allowance below zero\\\\\\\\\\\\");\\\\\\\\n        unchecked {\\\\\\\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\\\\\\\n        }\\\\\\\\n\\\\\\\\n        return true;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\\\\\\\n     *\\\\\\\\n     * This internal function is equivalent to {transfer}, and can be used to\\\\\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\\\\\n     *\\\\\\\\n     * Emits a {Transfer} event.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - `sender` cannot be the zero address.\\\\\\\\n     * - `recipient` cannot be the zero address.\\\\\\\\n     * - `sender` must have a balance of at least `amount`.\\\\\\\\n     */\\\\\\\\n    function _transfer(\\\\\\\\n        address sender,\\\\\\\\n        address recipient,\\\\\\\\n        uint256 amount\\\\\\\\n    ) internal virtual {\\\\\\\\n        require(sender != address(0), \\\\\\\\\\\\"ERC20: transfer from the zero address\\\\\\\\\\\\");\\\\\\\\n        require(recipient != address(0), \\\\\\\\\\\\"ERC20: transfer to the zero address\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\\\\\n\\\\\\\\n        uint256 senderBalance = _balances[sender];\\\\\\\\n        require(senderBalance >= amount, \\\\\\\\\\\\"ERC20: transfer amount exceeds balance\\\\\\\\\\\\");\\\\\\\\n        unchecked {\\\\\\\\n            _balances[sender] = senderBalance - amount;\\\\\\\\n        }\\\\\\\\n        _balances[recipient] += amount;\\\\\\\\n\\\\\\\\n        emit Transfer(sender, recipient, amount);\\\\\\\\n\\\\\\\\n        _afterTokenTransfer(sender, recipient, amount);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\\\\\n     * the total supply.\\\\\\\\n     *\\\\\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - `account` cannot be the zero address.\\\\\\\\n     */\\\\\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\\\\\n        require(account != address(0), \\\\\\\\\\\\"ERC20: mint to the zero address\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\\\\\n\\\\\\\\n        _totalSupply += amount;\\\\\\\\n        _balances[account] += amount;\\\\\\\\n        emit Transfer(address(0), account, amount);\\\\\\\\n\\\\\\\\n        _afterTokenTransfer(address(0), account, amount);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\\\\\n     * total supply.\\\\\\\\n     *\\\\\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - `account` cannot be the zero address.\\\\\\\\n     * - `account` must have at least `amount` tokens.\\\\\\\\n     */\\\\\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\\\\\n        require(account != address(0), \\\\\\\\\\\\"ERC20: burn from the zero address\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\\\\\n\\\\\\\\n        uint256 accountBalance = _balances[account];\\\\\\\\n        require(accountBalance >= amount, \\\\\\\\\\\\"ERC20: burn amount exceeds balance\\\\\\\\\\\\");\\\\\\\\n        unchecked {\\\\\\\\n            _balances[account] = accountBalance - amount;\\\\\\\\n        }\\\\\\\\n        _totalSupply -= amount;\\\\\\\\n\\\\\\\\n        emit Transfer(account, address(0), amount);\\\\\\\\n\\\\\\\\n        _afterTokenTransfer(account, address(0), amount);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\\\\\n     *\\\\\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\\\\\n     *\\\\\\\\n     * Emits an {Approval} event.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - `owner` cannot be the zero address.\\\\\\\\n     * - `spender` cannot be the zero address.\\\\\\\\n     */\\\\\\\\n    function _approve(\\\\\\\\n        address owner,\\\\\\\\n        address spender,\\\\\\\\n        uint256 amount\\\\\\\\n    ) internal virtual {\\\\\\\\n        require(owner != address(0), \\\\\\\\\\\\"ERC20: approve from the zero address\\\\\\\\\\\\");\\\\\\\\n        require(spender != address(0), \\\\\\\\\\\\"ERC20: approve to the zero address\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n        _allowances[owner][spender] = amount;\\\\\\\\n        emit Approval(owner, spender, amount);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\\\\\n     * minting and burning.\\\\\\\\n     *\\\\\\\\n     * Calling conditions:\\\\\\\\n     *\\\\\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\\'s tokens\\\\\\\\n     * will be transferred to `to`.\\\\\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\\\\\n     * - when `to` is zero, `amount` of ``from``\\\'s tokens will be burned.\\\\\\\\n     * - `from` and `to` are never both zero.\\\\\\\\n     *\\\\\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\\\\\n     */\\\\\\\\n    function _beforeTokenTransfer(\\\\\\\\n        address from,\\\\\\\\n        address to,\\\\\\\\n        uint256 amount\\\\\\\\n    ) internal virtual {}\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Hook that is called after any transfer of tokens. This includes\\\\\\\\n     * minting and burning.\\\\\\\\n     *\\\\\\\\n     * Calling conditions:\\\\\\\\n     *\\\\\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\\'s tokens\\\\\\\\n     * has been transferred to `to`.\\\\\\\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\\\\\\\n     * - when `to` is zero, `amount` of ``from``\\\'s tokens have been burned.\\\\\\\\n     * - `from` and `to` are never both zero.\\\\\\\\n     *\\\\\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\\\\\n     */\\\\\\\\n    function _afterTokenTransfer(\\\\\\\\n        address from,\\\\\\\\n        address to,\\\\\\\\n        uint256 amount\\\\\\\\n    ) internal virtual {}\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0x418cfe64226a974419f8ab7287ad4bb413156a4d7af8ab5d9bcaa5678d1a2f22\\\\",\\\\"license\\\\":\\\\"MIT\\\\"},\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\":{\\\\"content\\\\":\\\\"// SPDX-License-Identifier: MIT\\\\\\\\n\\\\\\\\npragma solidity ^0.8.0;\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\\\\\n */\\\\\\\\ninterface IERC20 {\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the amount of tokens in existence.\\\\\\\\n     */\\\\\\\\n    function totalSupply() external view returns (uint256);\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\\\\\n     */\\\\\\\\n    function balanceOf(address account) external view returns (uint256);\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Moves `amount` tokens from the caller\\\'s account to `recipient`.\\\\\\\\n     *\\\\\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\\\\\n     *\\\\\\\\n     * Emits a {Transfer} event.\\\\\\\\n     */\\\\\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\\\\\n     * zero by default.\\\\\\\\n     *\\\\\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\\\\\n     */\\\\\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\\'s tokens.\\\\\\\\n     *\\\\\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\\\\\n     *\\\\\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\\\\\n     * condition is to first reduce the spender\\\'s allowance to 0 and set the\\\\\\\\n     * desired value afterwards:\\\\\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\\\\\n     *\\\\\\\\n     * Emits an {Approval} event.\\\\\\\\n     */\\\\\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\\\\\n     * allowance mechanism. `amount` is then deducted from the caller\\\'s\\\\\\\\n     * allowance.\\\\\\\\n     *\\\\\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\\\\\n     *\\\\\\\\n     * Emits a {Transfer} event.\\\\\\\\n     */\\\\\\\\n    function transferFrom(\\\\\\\\n        address sender,\\\\\\\\n        address recipient,\\\\\\\\n        uint256 amount\\\\\\\\n    ) external returns (bool);\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\\\\\n     * another (`to`).\\\\\\\\n     *\\\\\\\\n     * Note that `value` may be zero.\\\\\\\\n     */\\\\\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\\\\\n     * a call to {approve}. `value` is the new allowance.\\\\\\\\n     */\\\\\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\\\\",\\\\"license\\\\":\\\\"MIT\\\\"},\\\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\\":{\\\\"content\\\\":\\\\"// SPDX-License-Identifier: MIT\\\\\\\\n\\\\\\\\npragma solidity ^0.8.0;\\\\\\\\n\\\\\\\\nimport \\\\\\\\\\\\"../ERC20.sol\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\"../../../utils/Context.sol\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\\\\\\\n * tokens and those that they have an allowance for, in a way that can be\\\\\\\\n * recognized off-chain (via event analysis).\\\\\\\\n */\\\\\\\\nabstract contract ERC20Burnable is Context, ERC20 {\\\\\\\\n    /**\\\\\\\\n     * @dev Destroys `amount` tokens from the caller.\\\\\\\\n     *\\\\\\\\n     * See {ERC20-_burn}.\\\\\\\\n     */\\\\\\\\n    function burn(uint256 amount) public virtual {\\\\\\\\n        _burn(_msgSender(), amount);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\\\'s\\\\\\\\n     * allowance.\\\\\\\\n     *\\\\\\\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - the caller must have allowance for ``accounts``\\\'s tokens of at least\\\\\\\\n     * `amount`.\\\\\\\\n     */\\\\\\\\n    function burnFrom(address account, uint256 amount) public virtual {\\\\\\\\n        uint256 currentAllowance = allowance(account, _msgSender());\\\\\\\\n        require(currentAllowance >= amount, \\\\\\\\\\\\"ERC20: burn amount exceeds allowance\\\\\\\\\\\\");\\\\\\\\n        unchecked {\\\\\\\\n            _approve(account, _msgSender(), currentAllowance - amount);\\\\\\\\n        }\\\\\\\\n        _burn(account, amount);\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0xf98cb1651a90d20ef77d8c1dd10d5fce4954e747603e5672a8292bd4368120dd\\\\",\\\\"license\\\\":\\\\"MIT\\\\"},\\\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\\\\":{\\\\"content\\\\":\\\\"// SPDX-License-Identifier: MIT\\\\\\\\n\\\\\\\\npragma solidity ^0.8.0;\\\\\\\\n\\\\\\\\nimport \\\\\\\\\\\\"../ERC20.sol\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\"../../../security/Pausable.sol\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\\\\\\\n *\\\\\\\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\\\\\\\n * period, or having an emergency switch for freezing all token transfers in the\\\\\\\\n * event of a large bug.\\\\\\\\n */\\\\\\\\nabstract contract ERC20Pausable is ERC20, Pausable {\\\\\\\\n    /**\\\\\\\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - the contract must not be paused.\\\\\\\\n     */\\\\\\\\n    function _beforeTokenTransfer(\\\\\\\\n        address from,\\\\\\\\n        address to,\\\\\\\\n        uint256 amount\\\\\\\\n    ) internal virtual override {\\\\\\\\n        super._beforeTokenTransfer(from, to, amount);\\\\\\\\n\\\\\\\\n        require(!paused(), \\\\\\\\\\\\"ERC20Pausable: token transfer while paused\\\\\\\\\\\\");\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0xb6d09c0a37d1222bff59fb166567558c057bab36b96a8457de29f25afd6e87b2\\\\",\\\\"license\\\\":\\\\"MIT\\\\"},\\\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\\":{\\\\"content\\\\":\\\\"// SPDX-License-Identifier: MIT\\\\\\\\n\\\\\\\\npragma solidity ^0.8.0;\\\\\\\\n\\\\\\\\nimport \\\\\\\\\\\\"../IERC20.sol\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\\\\\\\n *\\\\\\\\n * _Available since v4.1._\\\\\\\\n */\\\\\\\\ninterface IERC20Metadata is IERC20 {\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the name of the token.\\\\\\\\n     */\\\\\\\\n    function name() external view returns (string memory);\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the symbol of the token.\\\\\\\\n     */\\\\\\\\n    function symbol() external view returns (string memory);\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the decimals places of the token.\\\\\\\\n     */\\\\\\\\n    function decimals() external view returns (uint8);\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\\\\",\\\\"license\\\\":\\\\"MIT\\\\"},\\\\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\\\\":{\\\\"content\\\\":\\\\"// SPDX-License-Identifier: MIT\\\\\\\\n\\\\\\\\npragma solidity ^0.8.0;\\\\\\\\n\\\\\\\\nimport \\\\\\\\\\\\"../ERC20.sol\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\"../extensions/ERC20Burnable.sol\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\"../extensions/ERC20Pausable.sol\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\"../../../access/AccessControlEnumerable.sol\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\"../../../utils/Context.sol\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev {ERC20} token, including:\\\\\\\\n *\\\\\\\\n *  - ability for holders to burn (destroy) their tokens\\\\\\\\n *  - a minter role that allows for token minting (creation)\\\\\\\\n *  - a pauser role that allows to stop all token transfers\\\\\\\\n *\\\\\\\\n * This contract uses {AccessControl} to lock permissioned functions using the\\\\\\\\n * different roles - head to its documentation for details.\\\\\\\\n *\\\\\\\\n * The account that deploys the contract will be granted the minter and pauser\\\\\\\\n * roles, as well as the default admin role, which will let it grant both minter\\\\\\\\n * and pauser roles to other accounts.\\\\\\\\n */\\\\\\\\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\\\\\\\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\\\\\\\\\\"MINTER_ROLE\\\\\\\\\\\\");\\\\\\\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\\\\\\\\\\"PAUSER_ROLE\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\\\\\\\n     * account that deploys the contract.\\\\\\\\n     *\\\\\\\\n     * See {ERC20-constructor}.\\\\\\\\n     */\\\\\\\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\\\\\\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\\\\\\\n\\\\\\\\n        _setupRole(MINTER_ROLE, _msgSender());\\\\\\\\n        _setupRole(PAUSER_ROLE, _msgSender());\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Creates `amount` new tokens for `to`.\\\\\\\\n     *\\\\\\\\n     * See {ERC20-_mint}.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - the caller must have the `MINTER_ROLE`.\\\\\\\\n     */\\\\\\\\n    function mint(address to, uint256 amount) public virtual {\\\\\\\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\\\\\\\\\\"ERC20PresetMinterPauser: must have minter role to mint\\\\\\\\\\\\");\\\\\\\\n        _mint(to, amount);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Pauses all token transfers.\\\\\\\\n     *\\\\\\\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - the caller must have the `PAUSER_ROLE`.\\\\\\\\n     */\\\\\\\\n    function pause() public virtual {\\\\\\\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\\\\\\\\\\"ERC20PresetMinterPauser: must have pauser role to pause\\\\\\\\\\\\");\\\\\\\\n        _pause();\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Unpauses all token transfers.\\\\\\\\n     *\\\\\\\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - the caller must have the `PAUSER_ROLE`.\\\\\\\\n     */\\\\\\\\n    function unpause() public virtual {\\\\\\\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\\\\\\\\\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\\\\\\\\\\");\\\\\\\\n        _unpause();\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    function _beforeTokenTransfer(\\\\\\\\n        address from,\\\\\\\\n        address to,\\\\\\\\n        uint256 amount\\\\\\\\n    ) internal virtual override(ERC20, ERC20Pausable) {\\\\\\\\n        super._beforeTokenTransfer(from, to, amount);\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0x6118ad6468d16e315f563a4e63072290e726fdc75586b587c93d259678815f91\\\\",\\\\"license\\\\":\\\\"MIT\\\\"},\\\\"@openzeppelin/contracts/utils/Context.sol\\\\":{\\\\"content\\\\":\\\\"// SPDX-License-Identifier: MIT\\\\\\\\n\\\\\\\\npragma solidity ^0.8.0;\\\\\\\\n\\\\\\\\n/*\\\\\\\\n * @dev Provides information about the current execution context, including the\\\\\\\\n * sender of the transaction and its data. While these are generally available\\\\\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\\\\\n * paying for execution may not be the actual sender (as far as an application\\\\\\\\n * is concerned).\\\\\\\\n *\\\\\\\\n * This contract is only required for intermediate, library-like contracts.\\\\\\\\n */\\\\\\\\nabstract contract Context {\\\\\\\\n    function _msgSender() internal view virtual returns (address) {\\\\\\\\n        return msg.sender;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\\\\\n        return msg.data;\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\\\\",\\\\"license\\\\":\\\\"MIT\\\\"},\\\\"@openzeppelin/contracts/utils/Strings.sol\\\\":{\\\\"content\\\\":\\\\"// SPDX-License-Identifier: MIT\\\\\\\\n\\\\\\\\npragma solidity ^0.8.0;\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev String operations.\\\\\\\\n */\\\\\\\\nlibrary Strings {\\\\\\\\n    bytes16 private constant _HEX_SYMBOLS = \\\\\\\\\\\\"0123456789abcdef\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\\\\\\\n     */\\\\\\\\n    function toString(uint256 value) internal pure returns (string memory) {\\\\\\\\n        // Inspired by OraclizeAPI\\\'s implementation - MIT licence\\\\\\\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\\\\\\\n\\\\\\\\n        if (value == 0) {\\\\\\\\n            return \\\\\\\\\\\\"0\\\\\\\\\\\\";\\\\\\\\n        }\\\\\\\\n        uint256 temp = value;\\\\\\\\n        uint256 digits;\\\\\\\\n        while (temp != 0) {\\\\\\\\n            digits++;\\\\\\\\n            temp /= 10;\\\\\\\\n        }\\\\\\\\n        bytes memory buffer = new bytes(digits);\\\\\\\\n        while (value != 0) {\\\\\\\\n            digits -= 1;\\\\\\\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\\\\\\\n            value /= 10;\\\\\\\\n        }\\\\\\\\n        return string(buffer);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\\\\\\\n     */\\\\\\\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\\\\\\\n        if (value == 0) {\\\\\\\\n            return \\\\\\\\\\\\"0x00\\\\\\\\\\\\";\\\\\\\\n        }\\\\\\\\n        uint256 temp = value;\\\\\\\\n        uint256 length = 0;\\\\\\\\n        while (temp != 0) {\\\\\\\\n            length++;\\\\\\\\n            temp >>= 8;\\\\\\\\n        }\\\\\\\\n        return toHexString(value, length);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\\\\\\\n     */\\\\\\\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\\\\\\\n        bytes memory buffer = new bytes(2 * length + 2);\\\\\\\\n        buffer[0] = \\\\\\\\\\\\"0\\\\\\\\\\\\";\\\\\\\\n        buffer[1] = \\\\\\\\\\\\"x\\\\\\\\\\\\";\\\\\\\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\\\\\\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\\\\\\\n            value >>= 4;\\\\\\\\n        }\\\\\\\\n        require(value == 0, \\\\\\\\\\\\"Strings: hex length insufficient\\\\\\\\\\\\");\\\\\\\\n        return string(buffer);\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\\\\",\\\\"license\\\\":\\\\"MIT\\\\"},\\\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\\":{\\\\"content\\\\":\\\\"// SPDX-License-Identifier: MIT\\\\\\\\n\\\\\\\\npragma solidity ^0.8.0;\\\\\\\\n\\\\\\\\nimport \\\\\\\\\\\\"./IERC165.sol\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev Implementation of the {IERC165} interface.\\\\\\\\n *\\\\\\\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\\\\\\\n * for the additional interface id that will be supported. For example:\\\\\\\\n *\\\\\\\\n * ```solidity\\\\\\\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\\\\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\\\\\\\n * }\\\\\\\\n * ```\\\\\\\\n *\\\\\\\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\\\\\\\n */\\\\\\\\nabstract contract ERC165 is IERC165 {\\\\\\\\n    /**\\\\\\\\n     * @dev See {IERC165-supportsInterface}.\\\\\\\\n     */\\\\\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\\\\\n        return interfaceId == type(IERC165).interfaceId;\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\\\\",\\\\"license\\\\":\\\\"MIT\\\\"},\\\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\\":{\\\\"content\\\\":\\\\"// SPDX-License-Identifier: MIT\\\\\\\\n\\\\\\\\npragma solidity ^0.8.0;\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev Interface of the ERC165 standard, as defined in the\\\\\\\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\\\\\\\n *\\\\\\\\n * Implementers can declare support of contract interfaces, which can then be\\\\\\\\n * queried by others ({ERC165Checker}).\\\\\\\\n *\\\\\\\\n * For an implementation, see {ERC165}.\\\\\\\\n */\\\\\\\\ninterface IERC165 {\\\\\\\\n    /**\\\\\\\\n     * @dev Returns true if this contract implements the interface defined by\\\\\\\\n     * `interfaceId`. See the corresponding\\\\\\\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\\\\\\\n     * to learn more about how these ids are created.\\\\\\\\n     *\\\\\\\\n     * This function call must use less than 30 000 gas.\\\\\\\\n     */\\\\\\\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\\\\",\\\\"license\\\\":\\\\"MIT\\\\"},\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\":{\\\\"content\\\\":\\\\"// SPDX-License-Identifier: MIT\\\\\\\\n\\\\\\\\npragma solidity ^0.8.0;\\\\\\\\n\\\\\\\\n// CAUTION\\\\\\\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\\\\\\\n// because it relies on the compiler\\\'s built in overflow checks.\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev Wrappers over Solidity\\\'s arithmetic operations.\\\\\\\\n *\\\\\\\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\\\\\\\n * now has built in overflow checking.\\\\\\\\n */\\\\\\\\nlibrary SafeMath {\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\\\\\n     *\\\\\\\\n     * _Available since v3.4._\\\\\\\\n     */\\\\\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\\\\\n        unchecked {\\\\\\\\n            uint256 c = a + b;\\\\\\\\n            if (c < a) return (false, 0);\\\\\\\\n            return (true, c);\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\\\\\n     *\\\\\\\\n     * _Available since v3.4._\\\\\\\\n     */\\\\\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\\\\\n        unchecked {\\\\\\\\n            if (b > a) return (false, 0);\\\\\\\\n            return (true, a - b);\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\\\\\n     *\\\\\\\\n     * _Available since v3.4._\\\\\\\\n     */\\\\\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\\\\\n        unchecked {\\\\\\\\n            // Gas optimization: this is cheaper than requiring \\\'a\\\' not being zero, but the\\\\\\\\n            // benefit is lost if \\\'b\\\' is also tested.\\\\\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\\\\\n            if (a == 0) return (true, 0);\\\\\\\\n            uint256 c = a * b;\\\\\\\\n            if (c / a != b) return (false, 0);\\\\\\\\n            return (true, c);\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\\\\\n     *\\\\\\\\n     * _Available since v3.4._\\\\\\\\n     */\\\\\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\\\\\n        unchecked {\\\\\\\\n            if (b == 0) return (false, 0);\\\\\\\\n            return (true, a / b);\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\\\\\n     *\\\\\\\\n     * _Available since v3.4._\\\\\\\\n     */\\\\\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\\\\\n        unchecked {\\\\\\\\n            if (b == 0) return (false, 0);\\\\\\\\n            return (true, a % b);\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\\\\\n     * overflow.\\\\\\\\n     *\\\\\\\\n     * Counterpart to Solidity\\\'s `+` operator.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - Addition cannot overflow.\\\\\\\\n     */\\\\\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\\\\\n        return a + b;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\\\\\n     * overflow (when the result is negative).\\\\\\\\n     *\\\\\\\\n     * Counterpart to Solidity\\\'s `-` operator.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - Subtraction cannot overflow.\\\\\\\\n     */\\\\\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\\\\\n        return a - b;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\\\\\n     * overflow.\\\\\\\\n     *\\\\\\\\n     * Counterpart to Solidity\\\'s `*` operator.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - Multiplication cannot overflow.\\\\\\\\n     */\\\\\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\\\\\n        return a * b;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\\\\\n     * division by zero. The result is rounded towards zero.\\\\\\\\n     *\\\\\\\\n     * Counterpart to Solidity\\\'s `/` operator.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - The divisor cannot be zero.\\\\\\\\n     */\\\\\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\\\\\n        return a / b;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\\\\\n     * reverting when dividing by zero.\\\\\\\\n     *\\\\\\\\n     * Counterpart to Solidity\\\'s `%` operator. This function uses a `revert`\\\\\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - The divisor cannot be zero.\\\\\\\\n     */\\\\\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\\\\\n        return a % b;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\\\\\n     * overflow (when the result is negative).\\\\\\\\n     *\\\\\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\\\\\n     *\\\\\\\\n     * Counterpart to Solidity\\\'s `-` operator.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - Subtraction cannot overflow.\\\\\\\\n     */\\\\\\\\n    function sub(\\\\\\\\n        uint256 a,\\\\\\\\n        uint256 b,\\\\\\\\n        string memory errorMessage\\\\\\\\n    ) internal pure returns (uint256) {\\\\\\\\n        unchecked {\\\\\\\\n            require(b <= a, errorMessage);\\\\\\\\n            return a - b;\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\\\\\n     * division by zero. The result is rounded towards zero.\\\\\\\\n     *\\\\\\\\n     * Counterpart to Solidity\\\'s `/` operator. Note: this function uses a\\\\\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - The divisor cannot be zero.\\\\\\\\n     */\\\\\\\\n    function div(\\\\\\\\n        uint256 a,\\\\\\\\n        uint256 b,\\\\\\\\n        string memory errorMessage\\\\\\\\n    ) internal pure returns (uint256) {\\\\\\\\n        unchecked {\\\\\\\\n            require(b > 0, errorMessage);\\\\\\\\n            return a / b;\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\\\\\n     * reverting with custom message when dividing by zero.\\\\\\\\n     *\\\\\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\\\\\n     *\\\\\\\\n     * Counterpart to Solidity\\\'s `%` operator. This function uses a `revert`\\\\\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - The divisor cannot be zero.\\\\\\\\n     */\\\\\\\\n    function mod(\\\\\\\\n        uint256 a,\\\\\\\\n        uint256 b,\\\\\\\\n        string memory errorMessage\\\\\\\\n    ) internal pure returns (uint256) {\\\\\\\\n        unchecked {\\\\\\\\n            require(b > 0, errorMessage);\\\\\\\\n            return a % b;\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\\\\",\\\\"license\\\\":\\\\"MIT\\\\"},\\\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\\":{\\\\"content\\\\":\\\\"// SPDX-License-Identifier: MIT\\\\\\\\n\\\\\\\\npragma solidity ^0.8.0;\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev Wrappers over Solidity\\\'s arithmetic operations.\\\\\\\\n *\\\\\\\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\\\\\\\n * now has built in overflow checking.\\\\\\\\n */\\\\\\\\nlibrary SignedSafeMath {\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the multiplication of two signed integers, reverting on\\\\\\\\n     * overflow.\\\\\\\\n     *\\\\\\\\n     * Counterpart to Solidity\\\'s `*` operator.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - Multiplication cannot overflow.\\\\\\\\n     */\\\\\\\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\\\\\\\n        return a * b;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the integer division of two signed integers. Reverts on\\\\\\\\n     * division by zero. The result is rounded towards zero.\\\\\\\\n     *\\\\\\\\n     * Counterpart to Solidity\\\'s `/` operator.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - The divisor cannot be zero.\\\\\\\\n     */\\\\\\\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\\\\\\\n        return a / b;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the subtraction of two signed integers, reverting on\\\\\\\\n     * overflow.\\\\\\\\n     *\\\\\\\\n     * Counterpart to Solidity\\\'s `-` operator.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - Subtraction cannot overflow.\\\\\\\\n     */\\\\\\\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\\\\\\\n        return a - b;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the addition of two signed integers, reverting on\\\\\\\\n     * overflow.\\\\\\\\n     *\\\\\\\\n     * Counterpart to Solidity\\\'s `+` operator.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - Addition cannot overflow.\\\\\\\\n     */\\\\\\\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\\\\\\\n        return a + b;\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0xd1ddc24b24f12a347093844dd645c3a96bcdce05d1f51b8650946ad404cb3c40\\\\",\\\\"license\\\\":\\\\"MIT\\\\"},\\\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\\":{\\\\"content\\\\":\\\\"// SPDX-License-Identifier: MIT\\\\\\\\n\\\\\\\\npragma solidity ^0.8.0;\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * @dev Library for managing\\\\\\\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\\\\\\\n * types.\\\\\\\\n *\\\\\\\\n * Sets have the following properties:\\\\\\\\n *\\\\\\\\n * - Elements are added, removed, and checked for existence in constant time\\\\\\\\n * (O(1)).\\\\\\\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\\\\\\\n *\\\\\\\\n * ```\\\\\\\\n * contract Example {\\\\\\\\n *     // Add the library methods\\\\\\\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\\\\\\\n *\\\\\\\\n *     // Declare a set state variable\\\\\\\\n *     EnumerableSet.AddressSet private mySet;\\\\\\\\n * }\\\\\\\\n * ```\\\\\\\\n *\\\\\\\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\\\\\\\n * and `uint256` (`UintSet`) are supported.\\\\\\\\n */\\\\\\\\nlibrary EnumerableSet {\\\\\\\\n    // To implement this library for multiple types with as little code\\\\\\\\n    // repetition as possible, we write it in terms of a generic Set type with\\\\\\\\n    // bytes32 values.\\\\\\\\n    // The Set implementation uses private functions, and user-facing\\\\\\\\n    // implementations (such as AddressSet) are just wrappers around the\\\\\\\\n    // underlying Set.\\\\\\\\n    // This means that we can only create new EnumerableSets for types that fit\\\\\\\\n    // in bytes32.\\\\\\\\n\\\\\\\\n    struct Set {\\\\\\\\n        // Storage of set values\\\\\\\\n        bytes32[] _values;\\\\\\\\n        // Position of the value in the `values` array, plus 1 because index 0\\\\\\\\n        // means a value is not in the set.\\\\\\\\n        mapping(bytes32 => uint256) _indexes;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Add a value to a set. O(1).\\\\\\\\n     *\\\\\\\\n     * Returns true if the value was added to the set, that is if it was not\\\\\\\\n     * already present.\\\\\\\\n     */\\\\\\\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\\\\\\\n        if (!_contains(set, value)) {\\\\\\\\n            set._values.push(value);\\\\\\\\n            // The value is stored at length-1, but we add 1 to all indexes\\\\\\\\n            // and use 0 as a sentinel value\\\\\\\\n            set._indexes[value] = set._values.length;\\\\\\\\n            return true;\\\\\\\\n        } else {\\\\\\\\n            return false;\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Removes a value from a set. O(1).\\\\\\\\n     *\\\\\\\\n     * Returns true if the value was removed from the set, that is if it was\\\\\\\\n     * present.\\\\\\\\n     */\\\\\\\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\\\\\\\n        // We read and store the value\\\'s index to prevent multiple reads from the same storage slot\\\\\\\\n        uint256 valueIndex = set._indexes[value];\\\\\\\\n\\\\\\\\n        if (valueIndex != 0) {\\\\\\\\n            // Equivalent to contains(set, value)\\\\\\\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\\\\\\\n            // the array, and then remove the last element (sometimes called as \\\'swap and pop\\\').\\\\\\\\n            // This modifies the order of the array, as noted in {at}.\\\\\\\\n\\\\\\\\n            uint256 toDeleteIndex = valueIndex - 1;\\\\\\\\n            uint256 lastIndex = set._values.length - 1;\\\\\\\\n\\\\\\\\n            if (lastIndex != toDeleteIndex) {\\\\\\\\n                bytes32 lastvalue = set._values[lastIndex];\\\\\\\\n\\\\\\\\n                // Move the last value to the index where the value to delete is\\\\\\\\n                set._values[toDeleteIndex] = lastvalue;\\\\\\\\n                // Update the index for the moved value\\\\\\\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue\\\'s index to valueIndex\\\\\\\\n            }\\\\\\\\n\\\\\\\\n            // Delete the slot where the moved value was stored\\\\\\\\n            set._values.pop();\\\\\\\\n\\\\\\\\n            // Delete the index for the deleted slot\\\\\\\\n            delete set._indexes[value];\\\\\\\\n\\\\\\\\n            return true;\\\\\\\\n        } else {\\\\\\\\n            return false;\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns true if the value is in the set. O(1).\\\\\\\\n     */\\\\\\\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\\\\\\\n        return set._indexes[value] != 0;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the number of values on the set. O(1).\\\\\\\\n     */\\\\\\\\n    function _length(Set storage set) private view returns (uint256) {\\\\\\\\n        return set._values.length;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\\\\\\\n     *\\\\\\\\n     * Note that there are no guarantees on the ordering of values inside the\\\\\\\\n     * array, and it may change when more values are added or removed.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - `index` must be strictly less than {length}.\\\\\\\\n     */\\\\\\\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\\\\\\\n        return set._values[index];\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    // Bytes32Set\\\\\\\\n\\\\\\\\n    struct Bytes32Set {\\\\\\\\n        Set _inner;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Add a value to a set. O(1).\\\\\\\\n     *\\\\\\\\n     * Returns true if the value was added to the set, that is if it was not\\\\\\\\n     * already present.\\\\\\\\n     */\\\\\\\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\\\\\\\n        return _add(set._inner, value);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Removes a value from a set. O(1).\\\\\\\\n     *\\\\\\\\n     * Returns true if the value was removed from the set, that is if it was\\\\\\\\n     * present.\\\\\\\\n     */\\\\\\\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\\\\\\\n        return _remove(set._inner, value);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns true if the value is in the set. O(1).\\\\\\\\n     */\\\\\\\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\\\\\\\n        return _contains(set._inner, value);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the number of values in the set. O(1).\\\\\\\\n     */\\\\\\\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\\\\\\\n        return _length(set._inner);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\\\\\\\n     *\\\\\\\\n     * Note that there are no guarantees on the ordering of values inside the\\\\\\\\n     * array, and it may change when more values are added or removed.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - `index` must be strictly less than {length}.\\\\\\\\n     */\\\\\\\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\\\\\\\n        return _at(set._inner, index);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    // AddressSet\\\\\\\\n\\\\\\\\n    struct AddressSet {\\\\\\\\n        Set _inner;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Add a value to a set. O(1).\\\\\\\\n     *\\\\\\\\n     * Returns true if the value was added to the set, that is if it was not\\\\\\\\n     * already present.\\\\\\\\n     */\\\\\\\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\\\\\\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Removes a value from a set. O(1).\\\\\\\\n     *\\\\\\\\n     * Returns true if the value was removed from the set, that is if it was\\\\\\\\n     * present.\\\\\\\\n     */\\\\\\\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\\\\\\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns true if the value is in the set. O(1).\\\\\\\\n     */\\\\\\\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\\\\\\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the number of values in the set. O(1).\\\\\\\\n     */\\\\\\\\n    function length(AddressSet storage set) internal view returns (uint256) {\\\\\\\\n        return _length(set._inner);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\\\\\\\n     *\\\\\\\\n     * Note that there are no guarantees on the ordering of values inside the\\\\\\\\n     * array, and it may change when more values are added or removed.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - `index` must be strictly less than {length}.\\\\\\\\n     */\\\\\\\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\\\\\\\n        return address(uint160(uint256(_at(set._inner, index))));\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    // UintSet\\\\\\\\n\\\\\\\\n    struct UintSet {\\\\\\\\n        Set _inner;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Add a value to a set. O(1).\\\\\\\\n     *\\\\\\\\n     * Returns true if the value was added to the set, that is if it was not\\\\\\\\n     * already present.\\\\\\\\n     */\\\\\\\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\\\\\\\n        return _add(set._inner, bytes32(value));\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Removes a value from a set. O(1).\\\\\\\\n     *\\\\\\\\n     * Returns true if the value was removed from the set, that is if it was\\\\\\\\n     * present.\\\\\\\\n     */\\\\\\\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\\\\\\\n        return _remove(set._inner, bytes32(value));\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns true if the value is in the set. O(1).\\\\\\\\n     */\\\\\\\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\\\\\\\n        return _contains(set._inner, bytes32(value));\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the number of values on the set. O(1).\\\\\\\\n     */\\\\\\\\n    function length(UintSet storage set) internal view returns (uint256) {\\\\\\\\n        return _length(set._inner);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    /**\\\\\\\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\\\\\\\n     *\\\\\\\\n     * Note that there are no guarantees on the ordering of values inside the\\\\\\\\n     * array, and it may change when more values are added or removed.\\\\\\\\n     *\\\\\\\\n     * Requirements:\\\\\\\\n     *\\\\\\\\n     * - `index` must be strictly less than {length}.\\\\\\\\n     */\\\\\\\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\\\\\\\n        return uint256(_at(set._inner, index));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\\\\",\\\\"license\\\\":\\\\"MIT\\\\"},\\\\"contracts/Mocks/ERC20Mock.sol\\\\":{\\\\"content\\\\":\\\\"pragma solidity 0.8.6;\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * SPDX-License-Identifier: GPL-3.0-or-later\\\\\\\\n * Hegic\\\\\\\\n * Copyright (C) 2021 Hegic\\\\\\\\n *\\\\\\\\n * This program is free software: you can redistribute it and/or modify\\\\\\\\n * it under the terms of the GNU General Public License as published by\\\\\\\\n * the Free Software Foundation, either version 3 of the License, or\\\\\\\\n * (at your option) any later version.\\\\\\\\n *\\\\\\\\n * This program is distributed in the hope that it will be useful,\\\\\\\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\\\\\\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\\\\\\\n * GNU General Public License for more details.\\\\\\\\n *\\\\\\\\n * You should have received a copy of the GNU General Public License\\\\\\\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\\\\\\\n **/\\\\\\\\n\\\\\\\\nimport \\\\\\\\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n// import \\\\\\\\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\\\\\\\";\\\\\\\\n// import \\\\\\\\\\\\"hardhat/console.sol\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\ncontract ERC20Mock is ERC20 {\\\\\\\\n    uint8 private immutable _decimals;\\\\\\\\n\\\\\\\\n    constructor(\\\\\\\\n        string memory name,\\\\\\\\n        string memory symbol,\\\\\\\\n        uint8 __decimals\\\\\\\\n    ) ERC20(name, symbol) {\\\\\\\\n        _decimals = __decimals;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    function decimals() public view override returns (uint8) {\\\\\\\\n        return _decimals;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    function mintTo(address account, uint256 amount) public {\\\\\\\\n        _mint(account, amount);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    function mint(uint256 amount) public {\\\\\\\\n        _mint(msg.sender, amount);\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\",\\\\"keccak256\\\\":\\\\"0xfa4072428a58f2fab7e640e7b276bd8dc46bf83b4baf54fb3b251eca3dbc3cf0\\\\",\\\\"license\\\\":\\\\"GPL-3.0-or-later\\\\"}},\\\\"version\\\\":1}","bytecode":"0x60a06040523480156200001157600080fd5b5060405162000d3238038062000d328339810160408190526200003491620001f4565b8251839083906200004d90600390602085019062000097565b5080516200006390600490602084019062000097565b50505060f81b7fff000000000000000000000000000000000000000000000000000000000000001660805250620002cc9050565b828054620000a59062000279565b90600052602060002090601f016020900481019282620000c9576000855562000114565b82601f10620000e457805160ff191683800117855562000114565b8280016001018555821562000114579182015b8281111562000114578251825591602001919060010190620000f7565b506200012292915062000126565b5090565b5b8082111562000122576000815560010162000127565b600082601f8301126200014f57600080fd5b81516001600160401b03808211156200016c576200016c620002b6565b604051601f8301601f19908116603f01168101908282118183101715620001975762000197620002b6565b81604052838152602092508683858801011115620001b457600080fd5b600091505b83821015620001d85785820183015181830184015290820190620001b9565b83821115620001ea5760008385830101525b9695505050505050565b6000806000606084860312156200020a57600080fd5b83516001600160401b03808211156200022257600080fd5b62000230878388016200013d565b945060208601519150808211156200024757600080fd5b5062000256868287016200013d565b925050604084015160ff811681146200026e57600080fd5b809150509250925092565b600181811c908216806200028e57607f821691505b60208210811415620002b057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160f81c610a47620002eb60003960006101410152610a476000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063449a52f81161008c578063a0712d6811610066578063a0712d68146101c4578063a457c2d7146101d7578063a9059cbb146101ea578063dd62ed3e146101fd57600080fd5b8063449a52f81461017e57806370a082311461019357806395d89b41146101bc57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a578063395093511461016b575b600080fd5b6100dc610236565b6040516100e9919061095b565b60405180910390f35b610105610100366004610918565b6102c8565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b6101056101353660046108dc565b6102de565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016100e9565b610105610179366004610918565b61038d565b61019161018c366004610918565b6103c9565b005b6101196101a1366004610887565b6001600160a01b031660009081526020819052604090205490565b6100dc6103d7565b6101916101d2366004610942565b6103e6565b6101056101e5366004610918565b6103f3565b6101056101f8366004610918565b61048c565b61011961020b3660046108a9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b606060038054610245906109d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610271906109d6565b80156102be5780601f10610293576101008083540402835291602001916102be565b820191906000526020600020905b8154815290600101906020018083116102a157829003601f168201915b5050505050905090565b60006102d5338484610499565b50600192915050565b60006102eb8484846105bd565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103755760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103828533858403610499565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102d59185906103c49086906109b0565b610499565b6103d3828261078c565b5050565b606060048054610245906109d6565b6103f0338261078c565b50565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104755760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161036c565b6104823385858403610499565b5060019392505050565b60006102d53384846105bd565b6001600160a01b0383166104fb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161036c565b6001600160a01b03821661055c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161036c565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106215760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161036c565b6001600160a01b0382166106835760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161036c565b6001600160a01b038316600090815260208190526040902054818110156106fb5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161036c565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906107329084906109b0565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161077e91815260200190565b60405180910390a350505050565b6001600160a01b0382166107e25760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161036c565b80600260008282546107f491906109b0565b90915550506001600160a01b038216600090815260208190526040812080548392906108219084906109b0565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b80356001600160a01b038116811461088257600080fd5b919050565b60006020828403121561089957600080fd5b6108a28261086b565b9392505050565b600080604083850312156108bc57600080fd5b6108c58361086b565b91506108d36020840161086b565b90509250929050565b6000806000606084860312156108f157600080fd5b6108fa8461086b565b92506109086020850161086b565b9150604084013590509250925092565b6000806040838503121561092b57600080fd5b6109348361086b565b946020939093013593505050565b60006020828403121561095457600080fd5b5035919050565b600060208083528351808285015260005b818110156109885785810183015185820160400152820161096c565b8181111561099a576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156109d157634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806109ea57607f821691505b60208210811415610a0b57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220c70f11f89ea3a92f84446a97f0c59dc185a82f8a2c800b324421edc958e681b964736f6c63430008060033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063449a52f81161008c578063a0712d6811610066578063a0712d68146101c4578063a457c2d7146101d7578063a9059cbb146101ea578063dd62ed3e146101fd57600080fd5b8063449a52f81461017e57806370a082311461019357806395d89b41146101bc57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a578063395093511461016b575b600080fd5b6100dc610236565b6040516100e9919061095b565b60405180910390f35b610105610100366004610918565b6102c8565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b6101056101353660046108dc565b6102de565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016100e9565b610105610179366004610918565b61038d565b61019161018c366004610918565b6103c9565b005b6101196101a1366004610887565b6001600160a01b031660009081526020819052604090205490565b6100dc6103d7565b6101916101d2366004610942565b6103e6565b6101056101e5366004610918565b6103f3565b6101056101f8366004610918565b61048c565b61011961020b3660046108a9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b606060038054610245906109d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610271906109d6565b80156102be5780601f10610293576101008083540402835291602001916102be565b820191906000526020600020905b8154815290600101906020018083116102a157829003601f168201915b5050505050905090565b60006102d5338484610499565b50600192915050565b60006102eb8484846105bd565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103755760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103828533858403610499565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102d59185906103c49086906109b0565b610499565b6103d3828261078c565b5050565b606060048054610245906109d6565b6103f0338261078c565b50565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104755760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161036c565b6104823385858403610499565b5060019392505050565b60006102d53384846105bd565b6001600160a01b0383166104fb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161036c565b6001600160a01b03821661055c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161036c565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106215760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161036c565b6001600160a01b0382166106835760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161036c565b6001600160a01b038316600090815260208190526040902054818110156106fb5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161036c565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906107329084906109b0565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161077e91815260200190565b60405180910390a350505050565b6001600160a01b0382166107e25760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161036c565b80600260008282546107f491906109b0565b90915550506001600160a01b038216600090815260208190526040812080548392906108219084906109b0565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b80356001600160a01b038116811461088257600080fd5b919050565b60006020828403121561089957600080fd5b6108a28261086b565b9392505050565b600080604083850312156108bc57600080fd5b6108c58361086b565b91506108d36020840161086b565b90509250929050565b6000806000606084860312156108f157600080fd5b6108fa8461086b565b92506109086020850161086b565b9150604084013590509250925092565b6000806040838503121561092b57600080fd5b6109348361086b565b946020939093013593505050565b60006020828403121561095457600080fd5b5035919050565b600060208083528351808285015260005b818110156109885785810183015185820160400152820161096c565b8181111561099a576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156109d157634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806109ea57607f821691505b60208210811415610a0b57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220c70f11f89ea3a92f84446a97f0c59dc185a82f8a2c800b324421edc958e681b964736f6c63430008060033","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\\\'s tokens of at least `amount`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":855,"contract":"contracts/Mocks/ERC20Mock.sol:ERC20Mock","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":861,"contract":"contracts/Mocks/ERC20Mock.sol:ERC20Mock","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":863,"contract":"contracts/Mocks/ERC20Mock.sol:ERC20Mock","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":865,"contract":"contracts/Mocks/ERC20Mock.sol:ERC20Mock","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":867,"contract":"contracts/Mocks/ERC20Mock.sol:ERC20Mock","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}\');\n\n//# sourceURL=webpack://hedge/./src/deployments/ropsten/USDC.json?')}}]);